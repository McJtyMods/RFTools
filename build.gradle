buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id 'com.matthewprenger.cursegradle' version '1.1.0'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "https://tehnut.info/maven"
        //url "http://mobiusstrip.eu/maven"
    }
    maven { // JEI
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'OC Repo'
        url "http://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // McJtyLib
        url "http://maven.k-4u.nl"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
    maven { // Charset
        name = "Elytra Maven"
        url = "https://repo.elytradev.com"
    }
    maven {
        name = "TESLA"
        url = "https://maven.mcmoddev.com"
    }
}

def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".n" + ENV.DRONE_BUILD_NUMBER
}
group= "com.github.mcjty" // http://maven.apache.org/guideRs/mini/guide-naming-conventions.html
archivesBaseName = "rftools"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    mappings = mcp_mappings
    useDepAts = true
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

artifacts {
    archives sourceJar
    archives deobfJar
}


dependencies {
    deobfCompile "mezz.jei:jei_${jei_version}"
    deobfCompile "mcp.mobius.waila:Hwyla:${waila_version}"
    deobfCompile "mcjty.theoneprobe:TheOneProbe-${top_version}"
    deobfCompile "cofh:RedstoneFlux:${redstoneflux_version}"
    deobfCompile "net.darkhax.tesla:Tesla-${tesla_version}"
    //deobfCompile "pl.asie.charset:charset:0.5.0.164"
    compile "team.chisel.ctm:CTM:MC1.12.2-1.0.1.30"

    deobfCompile "com.github.mcjty:intwheel:${intwheel_version}"
    if (!project.hasProperty("singleproject")) {
        deobfCompile "com.github.mcjty:mcjtylib:${mcjtylib_version}"
        deobfCompile "com.github.mcjty:xnet:1.12-1.8.2"
    } else {
	compile project(':McJtyLib')
	compile project(':XNet')
    }
    compile "li.cil.oc:OpenComputers:${oc_version}"
}

jar {
    manifest {
        attributes 'FMLAT': 'rftools_at.cfg'
    }
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task("uploadJars", dependsOn: "reobf") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                    pom {
                        groupId = project.group
                        version = project.version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description 'RFTools'
                            scm {
                                url 'https://github.com/McJty/RFTools'
                                connection 'scm:git:git@github.com:McJty/RFTools.git'
                                developerConnection 'scm:git:git@github.com:McJty/RFTools.git'
                            }
                            issueManagement {
                                system 'github'
                                url 'https://github.com/McJty/RFTools/issues'
                            }
                            licenses {
                                license {
                                    name 'MIT'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'McJty'
                                    name 'McJty'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.enabled = project.hasProperty('curseforge_key')

curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion '1.12.2'
        mainArtifact(jar) {
            displayName = "${modname} - ${version}"
        }
        relations {
            requiredLibrary 'mcjtylib'
            optionalLibrary 'the-one-probe'
            optionalLibrary 'interaction-wheel'
            optionalLibrary 'redstone-flux'
        }
    }
}
